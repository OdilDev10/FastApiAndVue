from fastapi import APIRouter, status
from .controller import all_{module_name}, create_{module_name}, find_one_{module_name}, update_{module_name}, destroy_{module_name}
from .schemas import Schema_{module_name}_create_or_update

router_{module_name} = APIRouter()


@router_{module_name}.get("/{module_name}", tags=["{module_name}".upper()])
async def get_{module_name}(page: int = 1, limit: int = 10, search_term: str = ""):
    try:
        return await all_{module_name}(page=page, limit=limit, search_term=search_term)
    except Exception as error:
        return {
            "status_code": status.HTTP_500_INTERNAL_SERVER_ERROR,
            "detail": str(error),
        }


@router_{module_name}.post("/{module_name}", tags=["{module_name}".upper()])
async def post_{module_name}(elemet: Schema_{module_name}_create_or_update):
    try:
        return await create_{module_name}(elemet)
    except Exception as error:
        return {
            "status_code": status.HTTP_500_INTERNAL_SERVER_ERROR,
            "detail": str(error),
        }


@router_{module_name}.get("/{module_name}/{id}", tags=["{module_name}".upper()])
async def get_one_{module_name}(id):
    try:
        return await find_one_{module_name}(id)
    except Exception as error:
        return {
            "status_code": status.HTTP_500_INTERNAL_SERVER_ERROR,
            "detail": str(error),
        }


@router_{module_name}.put("/{module_name}/{id}", tags=["{module_name}".upper()])
async def post_{module_name}(id, elemet: Schema_{module_name}_create_or_update):
    try:
        return await update_{module_name}(id, elemet)
    except Exception as error:
        return {
            "status_code": status.HTTP_500_INTERNAL_SERVER_ERROR,
            "detail": str(error),
        }


@router_{module_name}.delete("/{module_name}/{id}", tags=["{module_name}".upper()])
async def post_{module_name}(id):
    try:
        return await destroy_{module_name}(id)
    except Exception as error:
        return {
            "status_code": status.HTTP_500_INTERNAL_SERVER_ERROR,
            "detail": str(error),
        }
